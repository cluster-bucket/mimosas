// Generated by CoffeeScript 1.6.3
(function() {
  (function(root, factory) {
    var lib;
    if (typeof define === 'function' && define.amd) {
      return define(['../../mimosas'], factory);
    } else if (typeof exports === 'object') {
      lib = require('../../src/mimosas.coffee');
      return module.exports = factory(lib);
    } else {
      return factory(root.Mimosas);
    }
  })(this, function(Mimosas) {
    return describe('Mimosas.ModelSubject', function() {
      var mockObserver, subject;
      subject = void 0;
      beforeEach(function() {
        return subject = new Mimosas.ModelSubject();
      });
      afterEach(function() {
        return subject = void 0;
      });
      mockObserver = function(pointer, callback) {
        return {
          __POINTER__: pointer,
          changed: callback || function() {}
        };
      };
      it('should exist', function() {
        return expect(Mimosas.ModelSubject).to.exist;
      });
      it('should attach an item', function() {
        expect(subject.observers.count()).to.equal(0);
        subject.attach(mockObserver('foo'));
        return expect(subject.observers.count()).to.equal(1);
      });
      it('should detatch an item', function() {
        subject.attach(mockObserver('foo'));
        expect(subject.observers.count()).to.equal(1);
        subject.detach('foo');
        return expect(subject.observers.count()).to.equal(0);
      });
      return it('should notify observers', function() {
        var isChanged;
        isChanged = false;
        subject.attach(mockObserver('foo', function() {
          return isChanged = true;
        }));
        subject.notify();
        return expect(isChanged).to.be["true"];
      });
    });
  });

}).call(this);
