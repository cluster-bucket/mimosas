// Generated by CoffeeScript 1.6.3
(function() {
  (function(root, factory) {
    var lib;
    if (typeof define === 'function' && define.amd) {
      return define(['../../mimosas'], factory);
    } else if (typeof exports === 'object') {
      lib = require('../../src/mimosas.coffee');
      return module.exports = factory(lib);
    } else {
      return factory(root.Mimosas);
    }
  })(this, function(Mimosas) {
    return describe('Mimosas.ControllerContext', function() {
      it('should exist', function() {
        return expect(Mimosas.ControllerContext).to.exist;
      });
      it('should throw when a strategy is not passed into its constructor', function() {
        var throwMe;
        throwMe = function() {
          var controllerContext;
          return controllerContext = new Mimosas.ControllerContext();
        };
        return expect(throwMe).to["throw"]();
      });
      it('should set a model on the strategy', function() {
        var controllerContext, passedModel, strategy;
        passedModel = void 0;
        strategy = {
          setModel: function(model) {
            return passedModel = model;
          }
        };
        controllerContext = new Mimosas.ControllerContext(strategy);
        controllerContext.setModel('foo');
        return expect(passedModel).to.equal('foo');
      });
      return it('should get a model from the strategy', function() {
        var controllerContext, model, strategy;
        strategy = {
          getModel: function() {
            return 'foo';
          }
        };
        controllerContext = new Mimosas.ControllerContext(strategy);
        model = controllerContext.getModel();
        return expect(model).to.equal('foo');
      });
    });
  });

}).call(this);
