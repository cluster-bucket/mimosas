// Generated by CoffeeScript 1.6.3
(function() {
  (function(root, factory) {
    var ViewComponent, ViewComposite, ViewObserver;
    if (typeof define === 'function' && define.amd) {
      define(['../../bin/view_composite', '../../bin/view_component', '../../bin/view_observer'], factory);
    } else if (typeof exports === 'object') {
      ViewComposite = require('../../src/view_composite.coffee');
      ViewComponent = require('../../src/view_component.coffee');
      ViewObserver = require('../../src/view_observer.coffee');
      module.exports = factory(ViewComposite, ViewComponent, ViewObserver);
    } else {
      ViewComposite = root.Mimosas.ViewComposite;
      ViewComponent = root.Mimosas.ViewComponent;
      ViewObserver = root.Mimosas.ViewObserver;
      factory(ViewComposite, ViewComponent, ViewObserver);
    }
  })(this, function(ViewComposite, ViewComponent, ViewObserver) {
    return describe('ViewComposite', function() {
      var composite, mockChild;
      composite = void 0;
      beforeEach(function() {
        return composite = new ViewComposite('#fixture');
      });
      afterEach(function() {
        return composite = void 0;
      });
      mockChild = function(pointer) {
        return {
          __POINTER__: pointer,
          setParent: function() {}
        };
      };
      it('should exist', function() {
        return expect(ViewComposite).to.exist;
      });
      it('should add children', function() {
        var child;
        expect(composite.list.count()).to.equal(0);
        composite.add(mockChild('foo'));
        expect(composite.list.count()).to.equal(1);
        child = composite.list.get('foo');
        return expect(child.__POINTER__).to.equal('foo');
      });
      return it('should remove children', function() {
        composite.add(mockChild('foo'));
        expect(composite.list.count()).to.equal(1);
        composite.remove('foo');
        return expect(composite.list.count()).to.equal(0);
      });
    });
  });

}).call(this);
