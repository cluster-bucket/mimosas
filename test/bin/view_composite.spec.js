// Generated by CoffeeScript 1.6.3
(function() {
  (function(root, factory) {
    var lib;
    if (typeof define === 'function' && define.amd) {
      return define(['../../mimosas'], factory);
    } else if (typeof exports === 'object') {
      lib = require('../../src/mimosas.coffee');
      return module.exports = factory(lib);
    } else {
      return factory(root.Mimosas);
    }
  })(this, function(Mimosas) {
    return describe('Mimosas.ViewComposite', function() {
      var composite, mockChild;
      composite = void 0;
      document.body.innerHTML += '<div id="fixture"><div id="fixture-child"></div></div>';
      beforeEach(function() {
        return composite = new Mimosas.ViewComposite('#fixture');
      });
      afterEach(function() {
        return composite = void 0;
      });
      mockChild = function(pointer) {
        return {
          __POINTER__: pointer,
          setParent: function() {}
        };
      };
      it('should exist', function() {
        return expect(Mimosas.ViewComposite).to.exist;
      });
      it('should add children', function() {
        var child;
        expect(composite.list.count()).to.equal(0);
        composite.add(mockChild('foo'));
        expect(composite.list.count()).to.equal(1);
        child = composite.list.get('foo');
        return expect(child.__POINTER__).to.equal('foo');
      });
      return it('should remove children', function() {
        composite.add(mockChild('foo'));
        expect(composite.list.count()).to.equal(1);
        composite.remove('foo');
        return expect(composite.list.count()).to.equal(0);
      });
    });
  });

}).call(this);
