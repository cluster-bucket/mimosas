// Generated by CoffeeScript 1.6.3
(function() {
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      define(factory);
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      if (root.Mimosas == null) {
        root.Mimosas = {};
      }
      root.Mimosas.List = factory();
    }
  })(this, function() {
    var List;
    List = (function() {
      function List() {
        this.pointers = [];
        this.items = {};
      }

      List.prototype.count = function() {
        return this.pointers.length;
      };

      List.prototype.get = function(pointer) {
        return this.items[pointer];
      };

      List.prototype.getByIndex = function(index) {
        if (index >= this.count()) {
          throw new Error('ArrayOutOfBoundsException');
        }
        if (index < 0) {
          throw new Error('ArrayOutOfBoundsException');
        }
        return this.items[this.pointers[index]];
      };

      List.prototype.first = function() {
        return this.items[this.pointers[0]];
      };

      List.prototype.last = function() {
        return this.items[this.pointers[this.pointers.length - 1]];
      };

      List.prototype.append = function(item) {
        var pointer;
        if (item.__POINTER__ == null) {
          throw new Error('NullPointerException');
        }
        pointer = item.__POINTER__;
        this.pointers.push(pointer);
        return this.items[pointer] = item;
      };

      List.prototype.remove = function(pointer) {
        var i, index, item, _i, _len, _ref;
        if (pointer == null) {
          throw new Error('ArgumentException');
        }
        if (this.items[pointer] == null) {
          throw new Error('ListItemUndefined');
        }
        index = -1;
        _ref = this.pointers;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          item = _ref[i];
          if (item === pointer) {
            index = i;
            break;
          }
        }
        if (index === -1) {
          throw new Error('ListItemUndefined');
        }
        delete this.items[pointer];
        return this.pointers.splice(index, 1);
      };

      List.prototype.removeLast = function() {
        var item;
        item = this.last();
        return this.remove(item.__POINTER__);
      };

      List.prototype.removeFirst = function() {
        var item;
        item = this.first();
        return this.remove(item.__POINTER__);
      };

      List.prototype.removeAll = function() {
        this.pointers = [];
        return this.items = {};
      };

      return List;

    })();
    return List;
  });

}).call(this);
