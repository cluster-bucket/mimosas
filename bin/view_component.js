// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(root, factory) {
    var ControllerContext, ControllerStrategy, ViewObserver;
    if (typeof define === 'function' && define.amd) {
      define(['./view_observer', './controller_context', './controller_strategy'], factory);
    } else if (typeof exports === 'object') {
      ViewObserver = require('./view_observer');
      ControllerContext = require('./controller_context');
      ControllerStrategy = require('./controller_strategy');
      module.exports = factory(ViewObserver, ControllerContext, ControllerStrategy);
    } else {
      if (root.Mimosas == null) {
        root.Mimosas = {};
      }
      ViewObserver = root.Mimosas.ViewObserver;
      ControllerContext = root.Mimosas.ControllerContext;
      ControllerStrategy = root.Mimosas.ControllerStrategy;
      root.Mimosas.ViewComponent = factory(ViewObserver, ControllerContext, ControllerStrategy);
    }
  })(this, function(ViewObserver, ControllerContext, ControllerStrategy) {
    var ViewComponent;
    ViewComponent = (function(_super) {
      __extends(ViewComponent, _super);

      function ViewComponent(selector) {
        ViewComponent.__super__.constructor.apply(this, arguments);
        this.setElement(selector);
        this.controller = new ControllerContext(new ControllerStrategy());
      }

      ViewComponent.prototype.setParent = function(parent) {
        this.parent = parent;
      };

      ViewComponent.prototype.getParent = function() {
        return this.parent;
      };

      ViewComponent.prototype.setController = function(controller) {
        this.controller = new ControllerContext(controller);
        this.controller.init();
        this.controller.setView(this);
        if (this.model != null) {
          return this.controller.setModel(this.model);
        }
      };

      ViewComponent.prototype.getController = function() {
        return this.controller;
      };

      ViewComponent.prototype.setModel = function(model) {
        this.model = model;
        this.model.attach(this);
        if (this.controller != null) {
          return this.controller.setModel(this.model);
        }
      };

      ViewComponent.prototype.setElement = function(selector) {
        if (selector.charAt(0) === '#') {
          return this.element = document.getElementById(selector.slice(1));
        } else {
          return this.element = document.querySelectorAll(selector);
        }
      };

      ViewComponent.prototype.getElement = function() {
        return this.element;
      };

      return ViewComponent;

    })(ViewObserver);
    return ViewComponent;
  });

}).call(this);
