// Generated by CoffeeScript 1.6.3
var ControllerContext, ControllerStrategy, ViewComponent, ViewObserver,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ViewObserver = require('./view_observer').ViewObserver;

ControllerContext = require('./controller_context').ControllerContext;

ControllerStrategy = require('./controller_strategy').ControllerStrategy;

ViewComponent = (function(_super) {
  __extends(ViewComponent, _super);

  function ViewComponent(selector) {
    ViewComponent.__super__.constructor.apply(this, arguments);
    if (!selector) {
      throw new ReferenceError('selector');
    }
    this.element = this.getElementFromSelector(selector);
    if (!this.element) {
      throw new ReferenceError('@element');
    }
    this.controller = new ControllerContext(new ControllerStrategy());
  }

  ViewComponent.prototype.getElementFromSelector = function(selector) {
    var nodes, scope;
    scope = this.element || document;
    nodes = scope.querySelectorAll(selector);
    if (nodes.length > 0) {
      return nodes[0];
    }
  };

  ViewComponent.prototype.setModel = function(model) {
    this.model = model;
    this.model.attach(this);
    return this.controller.setModel(this.model);
  };

  ViewComponent.prototype.getModel = function() {
    return this.model;
  };

  ViewComponent.prototype.setController = function(controller) {
    this.controller = new ControllerContext(controller);
    this.controller.setView(this);
    if (this.model != null) {
      return this.controller.setModel(this.model);
    }
  };

  ViewComponent.prototype.addEvent = function(type, selector, method) {
    var handler;
    handler = this.triggerEvent.bind(this, method, selector);
    return this.element.addEventListener(type, handler, false);
  };

  ViewComponent.prototype.triggerEvent = function(method, selector, e) {
    if (!this.elementMatchesSelector(e.target, selector)) {
      return;
    }
    return this.controller.trigger(method, e);
  };

  ViewComponent.prototype.closest = function(element, selector) {
    var parent;
    if (element === this.element) {
      return element;
    }
    if (this.elementMatchesSelector(element, selector)) {
      return element;
    }
    parent = element.parentNode;
    return this.closest(parent, selector);
  };

  ViewComponent.prototype.elementMatchesSelector = function(element, selector) {
    var matches, name, prefix, _i, _len, _ref;
    matches = false;
    _ref = ['webkit', 'moz', 'ms'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      prefix = _ref[_i];
      name = "" + prefix + "MatchesSelector";
      if (!element[name]) {
        continue;
      }
      matches = element[name](selector);
      break;
    }
    return matches;
  };

  ViewComponent.prototype.getElement = function() {
    return this.element;
  };

  ViewComponent.prototype.display = function() {};

  return ViewComponent;

})(ViewObserver);

exports.ViewComponent = ViewComponent;
