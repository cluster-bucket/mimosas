// Generated by CoffeeScript 1.6.3
(function() {
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      define(factory);
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      if (root.Mimosas == null) {
        root.Mimosas = {};
      }
      root.Mimosas.ControllerContext = factory();
    }
  })(this, function() {
    var ControllerContext;
    ControllerContext = (function() {
      function ControllerContext(strategy) {
        this.strategy = strategy;
        if (this.strategy == null) {
          throw new Error('ArgumentException');
        }
      }

      ControllerContext.prototype.init = function() {
        return this.strategy.init();
      };

      ControllerContext.prototype.trigger = function(selector, type, method, e) {
        if (!this.isValidEvent(selector, method, e)) {
          return;
        }
        if (this.strategy[method] != null) {
          return this.strategy[method].call(this.strategy, e);
        }
      };

      ControllerContext.prototype.isValidEvent = function(selector, e, method) {
        var hasElement, hasEvent;
        hasEvent = this.eventExists(selector, e, method);
        hasElement = this.elementExists(selector);
        return hasEvent && hasElement;
      };

      ControllerContext.prototype.eventExists = function(selector, e, method) {
        if (selector == null) {
          throw new ReferenceError('selector');
        }
        if (e == null) {
          throw new ReferenceError('e');
        }
        if (method == null) {
          throw new ReferenceError('method');
        }
        return this.strategy.hasEvent(e.type, selector, method);
      };

      ControllerContext.prototype.elementExists = function(selector) {
        var element, nodes;
        if (this.view == null) {
          throw new ReferenceError('@view');
        }
        if (selector == null) {
          throw new ReferenceError('selector');
        }
        element = this.view.getElement();
        if (element == null) {
          return false;
        }
        nodes = element.parentNode.querySelectorAll(selector);
        return nodes.length > 0;
      };

      ControllerContext.prototype.setView = function(view) {
        this.view = view;
        return this.bindEvents();
      };

      ControllerContext.prototype.bindEvents = function() {
        var eventName, events, method, selector, _ref, _results;
        events = this.strategy.getEventIterator();
        _results = [];
        while (!events.isDone()) {
          _ref = events.currentItem(), selector = _ref.selector, eventName = _ref.eventName, method = _ref.method;
          this.bindEvent(selector, eventName, method);
          _results.push(events.next());
        }
        return _results;
      };

      ControllerContext.prototype.bindEvent = function(selector, type, method) {
        var element;
        element = this.view.getElement();
        return element.addEventListener(type, this.trigger.bind(this, selector, type, method), false);
      };

      ControllerContext.prototype.setModel = function(model) {
        return this.strategy.setModel(model);
      };

      ControllerContext.prototype.getModel = function() {
        return this.strategy.getModel();
      };

      return ControllerContext;

    })();
    return ControllerContext;
  });

}).call(this);
