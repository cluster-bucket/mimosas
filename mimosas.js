/**
 * Mimosas v0.1.0
 * https://github.com/dustinboston/mimosas
 *
 * Copyright 2013-2014, Dustin boston
 * Released under the GPL License
 */
(function(root) {
  var Mimosas = function() {
    function require(path) { return require[path]; }

    require['./list'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      exports.List = (function() {
        function List() {
          this.pointers = [];
          this.items = {};
        }
      
        List.prototype.count = function() {
          return this.pointers.length;
        };
      
        List.prototype.get = function(pointer) {
          return this.items[pointer];
        };
      
        List.prototype.getByIndex = function(index) {
          if (index >= this.count()) {
            throw new Error('ArrayOutOfBoundsException');
          }
          if (index < 0) {
            throw new Error('ArrayOutOfBoundsException');
          }
          return this.items[this.pointers[index]];
        };
      
        List.prototype.first = function() {
          return this.items[this.pointers[0]];
        };
      
        List.prototype.last = function() {
          return this.items[this.pointers[this.pointers.length - 1]];
        };
      
        List.prototype.append = function(item) {
          var pointer;
          if (item.__POINTER__ == null) {
            throw new Error('NullPointerException');
          }
          pointer = item.__POINTER__;
          this.pointers.push(pointer);
          return this.items[pointer] = item;
        };
      
        List.prototype.remove = function(pointer) {
          var i, index, item, _i, _len, _ref;
          if (pointer == null) {
            throw new Error('ArgumentException');
          }
          if (this.items[pointer] == null) {
            throw new Error('ListItemUndefined');
          }
          index = -1;
          _ref = this.pointers;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            item = _ref[i];
            if (item === pointer) {
              index = i;
              break;
            }
          }
          if (index === -1) {
            throw new Error('ListItemUndefined');
          }
          delete this.items[pointer];
          return this.pointers.splice(index, 1);
        };
      
        List.prototype.removeLast = function() {
          var item;
          item = this.last();
          return this.remove(item.__POINTER__);
        };
      
        List.prototype.removeFirst = function() {
          var item;
          item = this.first();
          return this.remove(item.__POINTER__);
        };
      
        List.prototype.removeAll = function() {
          this.pointers = [];
          return this.items = {};
        };
      
        return List;
      
      })();
      
    
      return module.exports;
    })();
    
    require['./iterator'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      exports.Iterator = (function() {
        function Iterator(list) {
          this.list = list;
          this.current = 0;
        }
      
        Iterator.prototype.first = function() {
          this.current = 0;
          return this;
        };
      
        Iterator.prototype.next = function() {
          this.current += 1;
          return this;
        };
      
        Iterator.prototype.isDone = function() {
          return this.current >= this.list.count();
        };
      
        Iterator.prototype.currentItem = function() {
          if (this.isDone()) {
            throw new Error("IteratorOutOfBounds");
          }
          return this.list.getByIndex(this.current);
        };
      
        return Iterator;
      
      })();
      
    
      return module.exports;
    })();
    
    require['./guid'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      exports.Guid = (function() {
        function Guid() {}
      
        Guid.generate = function() {
          var S4;
          S4 = function() {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
          };
          return "" + (S4()) + (S4()) + "-" + (S4()) + "-" + (S4()) + "-" + (S4()) + "-" + (S4()) + (S4()) + (S4());
        };
      
        return Guid;
      
      })();
      
    
      return module.exports;
    })();
    
    require['./model_subject'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      var Iterator, List;
      
      List = require('./list').List;
      
      Iterator = require('./iterator').Iterator;
      
      exports.ModelSubject = (function() {
        function ModelSubject() {
          this.observers = new List();
        }
      
        ModelSubject.prototype.attach = function(obj) {
          return this.observers.append(obj);
        };
      
        ModelSubject.prototype.detach = function(observer) {
          return this.observers.remove(observer);
        };
      
        ModelSubject.prototype.notify = function() {
          var i, _results;
          i = new Iterator(this.observers);
          _results = [];
          while (!i.isDone()) {
            i.currentItem().changed(this);
            _results.push(i.next());
          }
          return _results;
        };
      
        return ModelSubject;
      
      })();
      
    
      return module.exports;
    })();
    
    require['./controller_context'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      exports.ControllerContext = (function() {
        function ControllerContext(strategy) {
          this.strategy = strategy;
          if (this.strategy == null) {
            throw new Error('ArgumentException');
          }
        }
      
        ControllerContext.prototype.trigger = function(method, e) {
          if (this.strategy[method] != null) {
            return this.strategy[method].call(this.strategy, e);
          }
        };
      
        ControllerContext.prototype.setModel = function(model) {
          return this.strategy.setModel(model);
        };
      
        ControllerContext.prototype.getModel = function() {
          return this.strategy.getModel();
        };
      
        ControllerContext.prototype.setView = function(view) {
          this.view = view;
          return this.strategy.setView(this.view);
        };
      
        return ControllerContext;
      
      })();
      
    
      return module.exports;
    })();
    
    require['./controller_strategy'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      exports.ControllerStrategy = (function() {
        function ControllerStrategy() {}
      
        ControllerStrategy.prototype.setModel = function(model) {
          this.model = model;
        };
      
        ControllerStrategy.prototype.getModel = function() {
          return this.model;
        };
      
        ControllerStrategy.prototype.setView = function(view) {
          this.view = view;
        };
      
        ControllerStrategy.prototype.getView = function() {
          return this.view;
        };
      
        return ControllerStrategy;
      
      })();
      
    
      return module.exports;
    })();
    
    require['./view_observer'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      var Guid;
      
      Guid = require('./guid').Guid;
      
      exports.ViewObserver = (function() {
        function ViewObserver() {
          this.__POINTER__ = Guid.generate();
        }
      
        ViewObserver.prototype.changed = function(theChangedSubject) {};
      
        return ViewObserver;
      
      })();
      
    
      return module.exports;
    })();
    
    require['./view_component'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      var ControllerContext, ControllerStrategy, ViewObserver,
        __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
      
      ViewObserver = require('./view_observer').ViewObserver;
      
      ControllerContext = require('./controller_context').ControllerContext;
      
      ControllerStrategy = require('./controller_strategy').ControllerStrategy;
      
      exports.ViewComponent = (function(_super) {
        __extends(ViewComponent, _super);
      
        function ViewComponent(selector) {
          ViewComponent.__super__.constructor.apply(this, arguments);
          if (!selector) {
            throw new ReferenceError('selector');
          }
          this.element = this.getElementFromSelector(selector);
          if (!this.element) {
            throw new ReferenceError('@element');
          }
          this.controller = new ControllerContext(new ControllerStrategy());
        }
      
        ViewComponent.prototype.getElementFromSelector = function(selector) {
          var nodes, scope;
          scope = this.element || document;
          nodes = scope.querySelectorAll(selector);
          if (nodes.length > 0) {
            return nodes[0];
          }
        };
      
        ViewComponent.prototype.setModel = function(model) {
          this.model = model;
          this.model.attach(this);
          return this.controller.setModel(this.model);
        };
      
        ViewComponent.prototype.getModel = function() {
          return this.model;
        };
      
        ViewComponent.prototype.setController = function(controller) {
          this.controller = new ControllerContext(controller);
          this.controller.setView(this);
          if (this.model != null) {
            return this.controller.setModel(this.model);
          }
        };
      
        ViewComponent.prototype.addEvent = function(type, selector, method) {
          var handler;
          handler = this.triggerEvent.bind(this, method, selector);
          return this.element.addEventListener(type, handler, false);
        };
      
        ViewComponent.prototype.triggerEvent = function(method, selector, e) {
          if (!this.elementMatchesSelector(e.target, selector)) {
            return;
          }
          return this.controller.trigger(method, e);
        };
      
        ViewComponent.prototype.closest = function(element, selector) {
          var parent;
          if (element === this.element) {
            return element;
          }
          if (this.elementMatchesSelector(element, selector)) {
            return element;
          }
          parent = element.parentNode;
          return this.closest(parent, selector);
        };
      
        ViewComponent.prototype.elementMatchesSelector = function(element, selector) {
          var matches, name, prefix, _i, _len, _ref;
          matches = false;
          _ref = ['webkit', 'moz', 'ms'];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            prefix = _ref[_i];
            name = "" + prefix + "MatchesSelector";
            if (!element[name]) {
              continue;
            }
            matches = element[name](selector);
            break;
          }
          return matches;
        };
      
        ViewComponent.prototype.getElement = function() {
          return this.element;
        };
      
        ViewComponent.prototype.display = function() {};
      
        return ViewComponent;
      
      })(ViewObserver);
      
    
      return module.exports;
    })();
    
    require['./view_composite'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      var List, ViewComponent,
        __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
      
      ViewComponent = require('./view_component').ViewComponent;
      
      List = require('./list').List;
      
      exports.ViewComposite = (function(_super) {
        __extends(ViewComposite, _super);
      
        function ViewComposite() {
          ViewComposite.__super__.constructor.apply(this, arguments);
          this.list = new List();
        }
      
        ViewComposite.prototype.add = function(component) {
          return this.list.append(component);
        };
      
        ViewComposite.prototype.remove = function(pointer) {
          return this.list.remove(pointer);
        };
      
        return ViewComposite;
      
      })(ViewComponent);
      
    
      return module.exports;
    })();
    
    require['./view_leaf'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      var ViewComponent, _ref,
        __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
      
      ViewComponent = require('./view_component').ViewComponent;
      
      exports.ViewLeaf = (function(_super) {
        __extends(ViewLeaf, _super);
      
        function ViewLeaf() {
          _ref = ViewLeaf.__super__.constructor.apply(this, arguments);
          return _ref;
        }
      
        return ViewLeaf;
      
      })(ViewComponent);
      
    
      return module.exports;
    })();
    
    require['./mimosas'] = (function() {
      var exports = {}, module = {exports: exports};
    
      // Generated by CoffeeScript 1.6.3
      exports.VERSION = '0.1.0';
      
      exports.NAME = 'Mimosas';
      
      exports.List = require('./list').List;
      
      exports.Iterator = require('./iterator').Iterator;
      
      exports.Guid = require('./guid').Guid;
      
      exports.ModelSubject = require('./model_subject').ModelSubject;
      
      exports.ControllerContext = require('./controller_context').ControllerContext;
      
      exports.ControllerStrategy = require('./controller_strategy').ControllerStrategy;
      
      exports.ViewObserver = require('./view_observer').ViewObserver;
      
      exports.ViewComponent = require('./view_component').ViewComponent;
      
      exports.ViewComposite = require('./view_composite').ViewComposite;
      
      exports.ViewLeaf = require('./view_leaf').ViewLeaf;
      
    
      return module.exports;
    })();
    
    

    return require['./mimosas'];
  }();

  if (typeof define === 'function' && define.amd) {
    define(function() { return Mimosas; });
  } else {
    root.Mimosas = Mimosas;
  }
}(this));