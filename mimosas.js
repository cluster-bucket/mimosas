// Generated by CoffeeScript 1.6.3
(function() {
  var Aggregate, ConcreteAggregate, ConcreteIterator, Iterator, List, Mimosas, Observer, Subject, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(root, factory) {
    if (typeof exports === 'object') {
      return module.exports = factory();
    } else if (typeof window.define === 'function' && window.define.amd) {
      return window.define(factory);
    } else {
      return root.Mimosas = factory();
    }
  })(this, function() {
    return Mimosas;
  });

  Mimosas = {};

  Mimosas.Observer = Observer = (function() {
    function Observer() {}

    Observer.prototype.changed = function(theChangedSubject) {};

    return Observer;

  })();

  Mimosas.Subject = Subject = (function() {
    var counter, observers;

    function Subject() {}

    counter = 0;

    observers = new Mimosas.List();

    Subject.prototype.attach = function(obj) {
      obj.__POINTER__ = this.counter;
      observers.append(obj);
      return counter += 1;
    };

    Subject.prototype.detach = function(observer) {
      return observers.remove(observer);
    };

    Subject.prototype.notify = function() {
      var i, _results;
      i = new Mimosas.Iterator(observers);
      _results = [];
      while (!i.isDone()) {
        i.currentItem().changed(this);
        _results.push(i.next());
      }
      return _results;
    };

    return Subject;

  })();

  Mimosas.List = List = (function() {
    function List() {
      this.items = [];
      this.objects = {};
    }

    List.prototype.count = function() {
      return this.items.length;
    };

    List.prototype.get = function(index) {
      return this.objects[this.items[index]];
    };

    List.prototype.first = function() {
      return this.objects[this.items[0]];
    };

    List.prototype.last = function() {
      return this.objects[this.items[this.items.length - 1]];
    };

    List.prototype.append = function(item) {
      var pointer;
      pointer = item.__POINTER__;
      this.items.push(pointer);
      return this.objects[pointer] = item;
    };

    List.prototype.remove = function(item) {
      var index, pointer;
      pointer = item.__POINTER__;
      delete this.objects[pointer];
      index = __indexOf.call(this.items, pointer) >= 0;
      return this.items.splice(index, 1);
    };

    List.prototype.removeLast = function() {
      return this.remove(this.last);
    };

    List.prototype.removeFirst = function() {
      return this.remove(this.first);
    };

    List.prototype.removeAll = function() {
      this.items = [];
      return this.objects = {};
    };

    return List;

  })();

  Iterator = (function() {
    function Iterator() {}

    Iterator.prototype.first = function() {};

    Iterator.prototype.next = function() {};

    Iterator.prototype.isDone = function() {};

    Iterator.prototype.currentItem = function() {};

    return Iterator;

  })();

  Mimosas.Iterator = ConcreteIterator = (function(_super) {
    __extends(ConcreteIterator, _super);

    function ConcreteIterator(list) {
      this.list = list;
      this.current = 0;
    }

    ConcreteIterator.prototype.first = function() {
      return this.current = 0;
    };

    ConcreteIterator.prototype.next = function() {
      return this.current += 1;
    };

    ConcreteIterator.prototype.isDone = function() {
      return this.current >= this.list.count();
    };

    ConcreteIterator.prototype.currentItem = function() {
      if (this.isDone()) {
        throw new Error("IteratorOutOfBounds");
      }
      return this.list.get(this.current);
    };

    return ConcreteIterator;

  })(Iterator);

  Aggregate = (function() {
    function Aggregate() {}

    Aggregate.prototype.createIterator = function() {};

    return Aggregate;

  })();

  Mimosas.Aggregate = ConcreteAggregate = (function(_super) {
    __extends(ConcreteAggregate, _super);

    function ConcreteAggregate() {
      _ref = ConcreteAggregate.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ConcreteAggregate.prototype.createIterator = function(items) {
      var key, list, val;
      list = new List();
      for (key in items) {
        val = items[key];
        val.__POINTER__ = key;
        list.append(val);
      }
      return new Mimosas.Iterator(list);
    };

    return ConcreteAggregate;

  })(Aggregate);

  Mimosas['extends'] = __extends;

}).call(this);
